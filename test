Manual
Manual
Manual
Manual
Automation
Automation
Automation
Automation
Automation
UI Automation
UI Automation
API Automation
API Automation
API Automation
SOAPUI Automation
SOAPUI Automation
Service Virtualization
Service Virtualization
Automation Framework
Automation Framework
Automation Framework
Automation Framework


Agile methodology & ceremonies
Types of testing: Smoke/Sanity/Regression
STLC lifecycle
Priority / Severity of bugs
Assertions
Exceptions and Handling exceptions
Loggers
Setup/Tear down
Annotations in TestNG
Implicit/ Explicit/Fluent
Dropdown, Tables, iFrames, Windows
Authentication Mechanism
GET & POST method implementation
Jsonpath, Serialization & De-Serialization
Groovy Scripting
Assertions and Validations in SOAPUI
Using Parasoft Tool with Groovy
Test Assets Deployment and Execution
Cucumber Framework concepts(Files) - not aware
Cucumber Framework concepts(Parameterization)
Cucumber Framework concepts(Background/ Scenario outline)
Framework design and Jenkins pipeline



SD

"Sprint Planning
Daily Standup
Sprint Review
Sprint Reterospective
Backlog refinement"
"Smoke test is done to make sure that the critical functionalities of the program are working fine, whereas sanity testing is done to check that newly added functionalities, bugs, etc., have been fixed.
Regression: new build changesto software don't break existing functionality"
"Req Analysis
Test Planning
Test Design
Test Env Setup
Test Execution
Test Closure"
"Severity --> refers to the degree of impact that a defect has on a product
Priority--> is about the order in which issues should be resolved based on their impact on the system
"
"AssertEquals
AssertFalse
AssertTrue
AssertNotEqual
Fail()"
"NoSuchElementException
ElementNotVisibleException
NoSuchFrameException
NoAlertPresentException
NoSuchWindowException
SessionNotFoundException
StaleElementReferenceException
InvalidSelectorException
ElementNotSelectableException
TimeOutException

RequestSpecificationValidationException
HttpResponseException"
"Logger logger = Logger.getLogger(Demo3_log4jWithPropertiesXML.class);
DOMConfigurator.configure(""log4j.xml"");
logger.info(""user id entered"");
	 "
"System.setProperty(""""webdriver.chrome.driver"""", """"C:\\Users\\bhuvanagiri_kumar\\Documents\\Selenium\\ChromeDriver126\\chromedriver.exe"""");
//launching chrome browser
driver=new ChromeDriver();
driver.manage().window().maximize();
driver.get(""""http://10.82.180.36/Common/Login.aspx"""");

Driver.quit()"
"	• BeforeSuite
	• BeforeTest
	• BeforeClass
	• BeforeMethod
	• Test Case
	• AfterMethod
	• AfterClass
	• AfterTest
	• AfterSuite"
"Implicit:  driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(2));
Explicit:Wait<WebDriver> wait = new WebDriverWait(driver, Duration.ofSeconds(2));
    wait.until(d -> revealed.isDisplayed());
FLUENT: Wait<WebDriver> fluentWait = new FluentWait<WebDriver>(driver)  
	       .withTimeout(60, SECONDS) // this defines the total amount of  time to wait for  
	       .pollingEvery(2, SECONDS) // this defines the polling frequency  
	       .ignoring(NoSuchElementException.class); // this defines the exception to ignore   
	 
	fluentWait.until(
        d -> {
          revealed.sendKeys(""Displayed"");
          return true;
        });"

Token Based, Basic Auth, Oauth
"RESTASSURED.given(), when(), then()
JsonObject:JSONObject data=new JSONObject();		data.put(""name"", ""uday"");
.body(data.toString())
.post(""url"")

.get(""url"")


POJO
External:File f=new File(""./body.json"");		FileReader fr =new FileReader(f);
JSONTokener jt=new JSONTokener(fr);		JSONObject data=new JSONObject(jt);
.body(data.toString())"
"process of changing an object's state into a byte stream. On the other hand, deserialization is the process of recreating the Java object in memory using the byte stream. This approach keeps the object alive.

A JsonPath (io.restassured.path.json.JsonPath) is an easy way to get values from an Object document without resorting to XPath.
Response employeesResponse = RestAssured.given().request(Method.GET, ""/all"");
JsonPath jsonPathObj = employeesResponse.jsonPath();
//get all employees id between 15 and 300
List<Map> employees = jsonPathObj.get(""company.employee
                .findAll { employee -> employee.id >= 15 && employee.id <= 300 }"");"
"//open txt file & Read first line
context.fileReader=new BufferedReader(new FileReader(""C:\\Users\\bhuvanagiri_kumar\\OneDrive - Infosys Limited\\Documents\\Soap Files\\Data_Param.txt""));
firstLine=context.fileReader.readLine();
String[] value=firstLine.split("";"");
testCase.testSteps[""Properties""].setPropertyValue(""val1"",value[0]);
testCase.testSteps[""Properties""].setPropertyValue(""val2"",value[1]);
log.info(""Uday"");
nextLine=context.fileReader.readLine()
if(nextLine!=null)
{
String[] next=nextLine.split("";"");
testRunner.testCase.testSteps[""Properties""].setPropertyValue(""val1"",next[0])
testRunner.testCase.testSteps[""Properties""].setPropertyValue(""val2"",next[1])
testRunner.gotoStep(0)
}


//Assertion
// check for RequestId element in response
def holder = new XmlHolder( messageExchange.responseContentAsXml )

assert holder[""//ns1:RequestId""] != null"
"propertyContetnt:contains/not contains/xpath match
status code & standards: invalidHTTPstatusCode, statusCode, notSoapFault,SchemaComplience,Soap Fault,Valid Status Codes, 
Response SLA"
capture the request xml parameters.. Using parameter query for certain data from DB and process the data and form response xml/json and return that response
we will keep the assets in server and will use in API for execution

"	FileInputStream fis=new FileInputStream(""C:\\Users\\bhuvanagiri_kumar\\Documents\\Selenium\\Excercise.xlsx"");
	XSSFWorkbook wb=new XSSFWorkbook(fis);
	XSSFSheet sheet=wb.getSheet(""Sheet2"");
	
	for(int i=sheet.getFirstRowNum()+1;i<=sheet.getLastRowNum();i++)
	{
		LoanType=sheet.getRow(i).getCell(0).getStringCellValue();
		
		sheet.getRow(i).createCell(4).setCellValue(MaxLoanAmount);
	}
	FileOutputStream fos=new FileOutputStream(""C:\\Users\\bhuvanagiri_kumar\\Documents\\Selenium\\Excercise.xlsx"");
	wb.write(fos);
	fos.close();
	fis.close();"
"	Background: User is Logged In
	Given I navigate to the login page
	When I submit username and password
	Then I should be logged in 
	Scenario: concatenations
	    Given concatenate FirstName ""Uday"" and ""Kumar""
	    When I do concatenation
	    Then print concatenated file
	
	 Scenario Outline: Login to iebi portal
	    Given initializing the chrome browser
	    When login using ""<username>"" and ""<password>""
	    Then close the application iebi portal
	    
	      Examples: 
	      | username  | password |
	      | donhere   | don@123  |
	      | donhere2  | don@123  |
	"

